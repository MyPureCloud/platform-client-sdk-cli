package models
import (
    "encoding/json"
    "strconv"
    "strings"
)

var (
    WebmessagingmessageMarshalled = false
)

// This struct is here to use the useless readonly properties so that their required imports don't throw an unused error (time, etc.)
type WebmessagingmessageDud struct { 
    


    


    


    


    


    Status string `json:"status"`


    Reasons []Reason `json:"reasons"`


    


    


    


    

}

// Webmessagingmessage - A web messaging message
type Webmessagingmessage struct { 
    // Id - Unique ID of the message. This ID is generated by Messaging Platform. Message receipts will have the same ID as the message they reference.
    Id string `json:"id"`


    // Channel - Channel-specific information that describes the message and the message channel/provider.
    Channel Webmessagingchannel `json:"channel"`


    // VarType - Message type.
    VarType string `json:"type"`


    // Text - Message text.
    Text string `json:"text"`


    // Content - List of content elements.
    Content []Webmessagingcontent `json:"content"`


    


    


    // Events - List of event elements.
    Events []Webmessagingevent `json:"events"`


    // Direction - The direction of the message.  Direction is always from the perspective of the Genesys Cloud platform.  An Inbound message is one sent from a guest to the Genesys Cloud Platform.  An Outbound message is one sent from the Genesys Cloud Platform to a guest.
    Direction string `json:"direction"`


    // OriginatingEntity - Specifies if this message was sent by a human agent or bot. The platform may use this to apply appropriate provider policies.
    OriginatingEntity string `json:"originatingEntity"`


    // Metadata - Additional metadata about this message.
    Metadata map[string]string `json:"metadata"`

}

// String returns a JSON representation of the model
func (o *Webmessagingmessage) String() string {
    
    
    
    
     o.Content = []Webmessagingcontent{{}} 
     o.Events = []Webmessagingevent{{}} 
    
    
     o.Metadata = map[string]string{"": ""} 

    j, _ := json.Marshal(o)
    str, _ := strconv.Unquote(strings.Replace(strconv.Quote(string(j)), `\\u`, `\u`, -1))

    return str
}

func (u *Webmessagingmessage) MarshalJSON() ([]byte, error) {
    type Alias Webmessagingmessage

    if WebmessagingmessageMarshalled {
        return []byte("{}"), nil
    }
    WebmessagingmessageMarshalled = true

    return json.Marshal(&struct {
        
        Id string `json:"id"`
        
        Channel Webmessagingchannel `json:"channel"`
        
        VarType string `json:"type"`
        
        Text string `json:"text"`
        
        Content []Webmessagingcontent `json:"content"`
        
        Events []Webmessagingevent `json:"events"`
        
        Direction string `json:"direction"`
        
        OriginatingEntity string `json:"originatingEntity"`
        
        Metadata map[string]string `json:"metadata"`
        *Alias
    }{

        


        


        


        


        
        Content: []Webmessagingcontent{{}},
        


        


        


        
        Events: []Webmessagingevent{{}},
        


        


        


        
        Metadata: map[string]string{"": ""},
        

        Alias: (*Alias)(u),
    })
}

