package models
import (
    "encoding/json"
    "strconv"
    "strings"
)

var (
    BrowserMarshalled = false
)

// This struct is here to use the useless readonly properties so that their required imports don't throw an unused error (time, etc.)
type BrowserDud struct { 
    


    


    


    


    


    


    


    


    


    


    

}

// Browser
type Browser struct { 
    // Family - Browser family (e.g. Chrome, Safari, Firefox).
    Family string `json:"family"`


    // Version - Browser version (e.g. 68.0.3440.84).
    Version string `json:"version"`


    // Lang - Language the browser is set to. Must conform to BCP 47.
    Lang string `json:"lang"`


    // Fingerprint - Fingerprint generated by looking at the individual browser features.
    Fingerprint string `json:"fingerprint"`


    // IsMobile - (Deprecated, use Device.isMobile instead) Flag that is true for mobile devices.
    IsMobile bool `json:"isMobile"`


    // ViewHeight - Browser's viewport height.
    ViewHeight int `json:"viewHeight"`


    // ViewWidth - Browser's viewport width.
    ViewWidth int `json:"viewWidth"`


    // FeaturesFlash - Whether Flash is installed.
    FeaturesFlash bool `json:"featuresFlash"`


    // FeaturesJava - Whether Java is installed.
    FeaturesJava bool `json:"featuresJava"`


    // FeaturesPdf - Whether the browser recognizes PDFs.
    FeaturesPdf bool `json:"featuresPdf"`


    // FeaturesWebrtc - Whether WebRTC is supported.
    FeaturesWebrtc bool `json:"featuresWebrtc"`

}

// String returns a JSON representation of the model
func (o *Browser) String() string {
    
    
    
    
    
    
    
    
    
    
    

    j, _ := json.Marshal(o)
    str, _ := strconv.Unquote(strings.Replace(strconv.Quote(string(j)), `\\u`, `\u`, -1))

    return str
}

func (u *Browser) MarshalJSON() ([]byte, error) {
    type Alias Browser

    if BrowserMarshalled {
        return []byte("{}"), nil
    }
    BrowserMarshalled = true

    return json.Marshal(&struct {
        
        Family string `json:"family"`
        
        Version string `json:"version"`
        
        Lang string `json:"lang"`
        
        Fingerprint string `json:"fingerprint"`
        
        IsMobile bool `json:"isMobile"`
        
        ViewHeight int `json:"viewHeight"`
        
        ViewWidth int `json:"viewWidth"`
        
        FeaturesFlash bool `json:"featuresFlash"`
        
        FeaturesJava bool `json:"featuresJava"`
        
        FeaturesPdf bool `json:"featuresPdf"`
        
        FeaturesWebrtc bool `json:"featuresWebrtc"`
        *Alias
    }{

        


        


        


        


        


        


        


        


        


        


        

        Alias: (*Alias)(u),
    })
}

